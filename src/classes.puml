@startuml classes
set namespaceSeparator none
class "BaseGraph" as library.tf_management.graph.BaseGraph #99DDFF {
  _graph : DiGraph
  _graph_lock : _RLock
  _running : bool
  _thread : Thread
  __del__()
  __init__()
  _removeExpiredEdges()
  _removePeriodically()
}
class "BaseMessage" as library.markers_management.markers.BaseMessage #77AADD {
  message_type : Type[Marker | MarkerArray]
  __init__(message_type: Type[Marker | MarkerArray])
  {abstract}process(message, time: Time)
}
class "CameraManager" as visualization.visualization.CameraManager #AAAA00 {
  K : ndarray
  camera_distance : float
  fov
  fx
  params : str
  __init__(params: 'VisualizationParams')
  computeExtrinsicMatrix(center: np.ndarray)
  computeIntrinsicMatrix()
  metersToPixels(distance_m)
  projectToImage(point_camera: np.ndarray)
  worldToCamera(point: np.ndarray, T_camera_world)
}
class "FrameRMV" as library.utils.draw.FrameRMV #EEDD88 {
  end_connection : Transform
  frame
  name : str
  opacity : float
  start_connection : Transform
  transform : Transform
  valid : bool
  __init__()
  fill(frame: str, transform: Transform, start_connection: Transform, end_connection: Transform, opacity: float, valid: bool)
}
class "MarkerArrayMessage" as library.markers_management.markers.MarkerArrayMessage #77AADD {
  __init__()
  process(message: MarkerArray, time: Time) -> List[MarkerRmv]
}
class "MarkerMessage" as library.markers_management.markers.MarkerMessage #77AADD {
  __init__()
  process(message: Marker, time: Time) -> MarkerRmv
}
class "MarkerRmv" as library.markers_management.markers.MarkerRmv #77AADD {
  __init__(marker: Marker, current_time: Time)
  equals(other_marker: 'MarkerRmv') -> bool
}
class "MarkerRmvBase" as library.markers_management.markers.MarkerRmvBase #77AADD {
  _marker : Marker
  _modified_pose : NoneType, Pose
  _reception_time : Time
  color
  frame_id
  identifier
  lifetime
  modified_pose
  points
  pose
  scale
  type
  __init__(marker: Marker, reception_time: Time)
  getTransform()
  isExpired(current_time: Time) -> bool
}
class "MarkersHandler" as library.markers_management.markers.MarkersHandler #77AADD {
  __lock_markers_list : _RLock
  __markers : dict[tuple[str, int], MarkerRmv]
  __node : Node
  __running : bool
  __thread : Optional[Thread]
  markers
  __del__()
  __init__(node: Node)
  _deleteExpiredMarkers()
  addMarker(marker: Marker | MarkerArray)
  clearMarkersList()
}
class "RmvChore" as rmv_chore.rmv_chore.RmvChore #BBCC33 {
  _is_running : bool
  data_manager
  node : Node
  thread : Thread
  timer_logger
  timer_logger2
  timer_logger_loop
  visu_params
  visualization
  {abstract}__del__() -> None
  __init__() -> None
  _updateMarkers() -> None
  getNode() -> Node
  loop() -> None
}
class "SharedData" as library.utils.shared_data.SharedData #EEDD88 {
  main_tf
  markers : List[MarkerRmv]
  other_tfs : Dict[str, TransformStamped], List[FrameRMV]
  __init__()
  get_main_tf() -> FrameRMV
  get_markers()
  get_other_tfs() -> List[FrameRMV]
  update_main_tf(tf: FrameRMV)
  update_markers(markers: List[MarkerRmv])
  update_other_tfs(tfs: List[FrameRMV])
}
class "SubscriptionManager" as library.topic_management.subscription_manager.SubscriptionManager #44BB99 {
  __subscriptions : Dict[str, Subscription]
  _node : Node
  active_topics
  timer_logger
  __init__(node: Node)
  _getMessageType(type_string: str) -> Type[Marker | MarkerArray]
  callback(message: Marker | MarkerArray)
  subscribe(topic: str, topic_type: str)
  unsubscribe(topic: str)
}
class "TFManager" as library.tf_management.tf.TFManager #99DDFF {
  all_transform_from_main_frame : dict[str, FrameRMV]
  count : int
  expiration_duration : float
  frame_index : int
  main_frame_name : str
  node : Node
  start_time
  timer_logger
  __init__(node: Node) -> None
  equalMainFrame(frame: str) -> bool
  getAllTransformsFromMainFrame() -> dict[str, FrameRMV]
  getAvailableTFNames() -> List[str]
  getMainFrame() -> FrameRMV
  setDefaultMainFrame() -> None
  tfCallback(msg: TFMessage) -> None
  tfStaticCallback(msg: TFMessage) -> None
  updateAllTransformsFrom() -> None
}
class "TimerLogger" as library.utils.timer_log.TimerLogger #EEDD88 {
  enabled : bool
  executionTimes : list
  lastLogTime
  node : Node
  period : float
  __init__(node: Node, period: float, enabled: bool)
  _recordExecutionTime(funcName: str, elapsedTime: float) -> None
  logExecutionTime(func)
}
class "TopicManager" as library.topic_management.topic_manager.TopicManager #44BB99 {
  timer_logger_2
  __findMarkersTopics()
  __findMarkersTopicsCallBack() -> None
  __init__(node: Node, process_period: float) -> None
  _filter(topics: List[Tuple[str, List[str]]], expected_types: List[str]) -> List[Tuple[str, str]]
  _hasMatchingType(received_types: List[str], expected_types: List[str]) -> str | None
  _hasPublisher(topic: str) -> bool
  _removeUnpublishedTopics(filtered_topics: List[Tuple[str, str]]) -> None
  _subscribeToTopics(filtered_topics: List[Tuple[str, str]]) -> None
}
class "TransformGraph" as library.tf_management.graph.TransformGraph #99DDFF {
  frames
  _computeTransformInfo(path: List[str]) -> FrameRMV
  addTransform(transform_stamped: TransformStamped, static: bool, expiration: float)
  evaluateTransformsFrom(main_frame: str) -> List[FrameRMV]
  getTransform(parent: str, child: str) -> Optional[Transform]
}
class "Visualization" as visualization.visualization.Visualization #AAAA00 {
  axes_distance : float
  bridge : CvBridge
  draw_grid : bool
  grid_spacing : float
  image : ndarray
  node : str
  publisher
  __init__(node: 'Node', params: 'VisualizationParams')
  createNewImage()
  generateCameraView(shared_data: SharedData)
  isWithinBounds(point)
  visualize(shared_data: SharedData)
}
class "VisualizationParams" as library.parameters.params.VisualizationParams #EE8866 {
  background_color : ColorRGBA
  conversion_ratio : float
  fps : int
  height : int
  publish_image : bool
  width : int
  __init__(width: int, height: int, fps: int, background_color: ColorRGBA)
}
class "dataManager" as library.markers_management.data_manager.dataManager #77AADD {
  _shared_data
  main_frame_frame_info
  markers_manager
  shared_data
  tf_manager
  timer_logger_tf
  __init__(node: Node) -> None
  _filterMarkersInMainTfFrame(markers_rmv: List[MarkerRmv], relative_transforms: dict[str, FrameRMV]) -> List[MarkerRmv]
  process()
  run()
}
library.markers_management.markers.MarkerArrayMessage --|> library.markers_management.markers.BaseMessage
library.markers_management.markers.MarkerMessage --|> library.markers_management.markers.BaseMessage
library.markers_management.markers.MarkerRmv --|> library.markers_management.markers.MarkerRmvBase
library.tf_management.graph.TransformGraph --|> library.tf_management.graph.BaseGraph
library.tf_management.tf.TFManager --|> library.tf_management.graph.TransformGraph
library.topic_management.subscription_manager.SubscriptionManager --|> library.markers_management.markers.MarkersHandler
library.topic_management.topic_manager.TopicManager --|> library.topic_management.subscription_manager.SubscriptionManager
visualization.visualization.Visualization --|> visualization.visualization.CameraManager
library.markers_management.data_manager.dataManager --* rmv_chore.rmv_chore.RmvChore : data_manager
library.parameters.params.VisualizationParams --* rmv_chore.rmv_chore.RmvChore : visu_params
library.tf_management.tf.TFManager --* library.markers_management.data_manager.dataManager : tf_manager
library.topic_management.topic_manager.TopicManager --* library.markers_management.data_manager.dataManager : markers_manager
library.utils.draw.FrameRMV --* library.markers_management.data_manager.dataManager : main_frame_frame_info
library.utils.draw.FrameRMV --* library.markers_management.data_manager.dataManager : main_frame_frame_info
library.utils.draw.FrameRMV --* library.utils.shared_data.SharedData : main_tf
library.utils.shared_data.SharedData --* library.markers_management.data_manager.dataManager : _shared_data
library.utils.timer_log.TimerLogger --* library.markers_management.data_manager.dataManager : timer_logger_tf
library.utils.timer_log.TimerLogger --* library.tf_management.tf.TFManager : timer_logger
library.utils.timer_log.TimerLogger --* library.topic_management.subscription_manager.SubscriptionManager : timer_logger
library.utils.timer_log.TimerLogger --* library.topic_management.topic_manager.TopicManager : timer_logger_2
library.utils.timer_log.TimerLogger --* rmv_chore.rmv_chore.RmvChore : timer_logger
library.utils.timer_log.TimerLogger --* rmv_chore.rmv_chore.RmvChore : timer_logger2
library.utils.timer_log.TimerLogger --* rmv_chore.rmv_chore.RmvChore : timer_logger_loop
visualization.visualization.Visualization --* rmv_chore.rmv_chore.RmvChore : visualization
@enduml
